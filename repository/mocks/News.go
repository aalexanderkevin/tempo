// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "tempo/model"

	mock "github.com/stretchr/testify/mock"
)

// News is an autogenerated mock type for the News type
type News struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, news
func (_m *News) Add(ctx context.Context, news *model.News) (*model.News, error) {
	ret := _m.Called(ctx, news)

	var r0 *model.News
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.News) (*model.News, error)); ok {
		return rf(ctx, news)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.News) *model.News); ok {
		r0 = rf(ctx, news)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.News) error); ok {
		r1 = rf(ctx, news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *News) Get(ctx context.Context, id *string) (*model.News, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.News
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) (*model.News, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string) *model.News); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.News)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNews interface {
	mock.TestingT
	Cleanup(func())
}

// NewNews creates a new instance of News. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNews(t mockConstructorTestingTNewNews) *News {
	mock := &News{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
